#include <iostream>  //declaring variables
#include <iomanip>
#include <string>
#include <fstream>
#include <cstdlib>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include "Library.cpp"
using namespace std;

double f(float x){
    double y = 1 + pow(x,2);
    return 4/y;
}

double Monte_Carlo(double (*fn)(float), float a, float b, int N){
    double h = (b - a)/N;
    double rand_n;
    double arr[N];
    for (int i = 0; i < N; i++){
      rand_n = (float(rand())/float((RAND_MAX)) * b);
      arr[i]= rand_n;
    }
    double s1 = 0;
    for(int i= 0;i<N;i++){
        double x = pow(f(arr[i]),2);
        s1 = s1 + x;
    }
    double A = s1/N;

    double s2 = 0;
    for(int i= 0;i<N;i++){
        s2 = s2 + f(arr[i]);
    }
    double B = (pow(s2/N,2));
    double F = h*(s2);
    double sigma = pow((A - B),0.5);
    cout<<  sigma  << " "<< F << endl;
    return F;
}

int main(){
    float arrX[1000][2];
    //for(int i = 0;i<500;i++)arrX[i] = 0;
    int N = 0;
    ofstream outfile;
        outfile.open("monte_carlo.csv");
    for(int i = 0;i<1000;i++){
        N = N+10;
        arrX[i][0] = N;
        arrX[i][1] = Monte_Carlo(f,0,1,N);
        outfile<< arrX[i][0] << "," << arrX[i][1] <<  endl;
        //cout << arrX[i][0] << "," << arrX[i][1] <<  endl;
    }
    outfile.close();
    cout << "Please find the attached csv file generated and the plot" << endl;
    //Please find the attached csv file generated and the plot.4
    /* SIGMA AND  F VALUES FOR FIRST HUNDRED OF ITERATES
    0.601626 3.02765
    0.587808 3.38859
    0.673776 3.01692
    0.585798 3.16057
    0.629729 3.11491
    0.645555 3.18253
    0.626692 3.10462
    0.610951 3.14208
    0.652719 3.19999
    0.661537 3.10989
    0.612422 3.16901
    0.638557 3.09978
    0.639587 3.10981
    0.677 3.09185
    0.642517 3.16045
    0.658852 3.14875
    0.643342 3.18694
    0.652115 3.1954
    0.58968 3.18928
    0.636923 3.07041
    0.643719 3.08575
    0.649602 3.09447
    0.597202 3.21886
    0.631599 3.09959
    0.639716 3.1415
    0.648888 3.15361
    0.63657 3.11059
    0.64576 3.16002
    0.642372 3.09445
    0.651476 3.11927
    0.657991 3.07183
    0.621592 3.16967
    0.656095 3.12878
    0.633274 3.13077
    0.639212 3.10592
    0.65225 3.15217
    0.655692 3.1129
    0.632885 3.12982
    0.648546 3.11615
    0.653693 3.16609
    0.651418 3.14457
    0.642902 3.14564
    0.646291 3.09465
    0.643036 3.12997
    0.626134 3.15933
    0.648369 3.12631
    0.629479 3.1384
    0.632769 3.14454
    0.63848 3.13468
    0.64342 3.15883
    0.653235 3.0992
    0.643131 3.11394
    0.638658 3.15734
    0.647998 3.13245
    0.652044 3.09368
    0.649138 3.15515
    0.654987 3.14981
    0.641518 3.12271
    0.65286 3.03951
    0.635624 3.14874
    0.64448 3.18753
    0.650915 3.14521
    0.633061 3.12526
    0.639383 3.11282
    0.635812 3.14702
    0.641502 3.12461
    0.648283 3.14191
    0.649068 3.17302
    0.641521 3.11971
    0.641535 3.12687
    0.636185 3.14347
    0.640899 3.1506
    0.641595 3.1579
    0.646816 3.13285
    0.643844 3.09722
    0.648515 3.15047
    0.644149 3.16107
    0.657624 3.13704
    0.643048 3.10294
    0.628503 3.12404
    0.642426 3.12085
    0.642242 3.17653
    0.626252 3.15325
    0.64923 3.11896
    0.65635 3.14986
    0.653355 3.08884
    0.634917 3.15536
    0.628905 3.14462
    0.653894 3.16102
    0.637965 3.15978
    0.634172 3.17566
    0.640043 3.16843
    0.646925 3.14549
    0.63828 3.1316
    0.634683 3.12328
    0.642266 3.12335
    0.655933 3.11442
    0.636954 3.14491
    0.633276 3.15035
    0.649447 3.13505
    0.645082 3.12418
*/
    return 0;
}
